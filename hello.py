import numpy as np
import random
from sklearn.metrics.pairwise import pairwise_distances
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import MinMaxScaler


##########################################################    K MEDOID STARTS   ###########################################################
def kMedoids(D, k, tmax=10000):
    # determine dimensions of distance matrix D
    m, n = D.shape

    if k > n:
        raise Exception('too many medoids')

    # find a set of valid initial cluster medoid indices since we
    # can't seed different clusters with two points at the same location
    valid_medoid_inds = set(range(n))
    invalid_medoid_inds = set([])
    rs,cs = np.where(D==0)
    # the rows, cols must be shuffled because we will keep the first duplicate below
    index_shuf = list(range(len(rs)))
    np.random.shuffle(index_shuf)
    rs = rs[index_shuf]
    cs = cs[index_shuf]
    for r,c in zip(rs,cs):
        # if there are two points with a distance of 0...
        # keep the first one for cluster init
        if r < c and r not in invalid_medoid_inds:
            invalid_medoid_inds.add(c)
    valid_medoid_inds = list(valid_medoid_inds - invalid_medoid_inds)

    if k > len(valid_medoid_inds):
        raise Exception('too many medoids (after removing {} duplicate points)'.format(
            len(invalid_medoid_inds)))

    # randomly initialize an array of k medoid indices
    M = np.array(valid_medoid_inds)
    np.random.shuffle(M)
    M = np.sort(M[:k])

    # create a copy of the array of medoid indices
    Mnew = np.copy(M)

    # initialize a dictionary to represent clusters
    C = {}
    for t in range(tmax):
        # determine clusters, i. e. arrays of data indices
        J = np.argmin(D[:,M], axis=1)
        for kappa in range(k):
            C[kappa] = np.where(J==kappa)[0]
        # update cluster medoids
        for kappa in range(k):
            J = np.mean(D[np.ix_(C[kappa],C[kappa])],axis=1)
            j = np.argmin(J)
            Mnew[kappa] = C[kappa][j]
        np.sort(Mnew)
        # check for convergence
        if np.array_equal(M, Mnew):
            break
        M = np.copy(Mnew)
    else:
        # final update of cluster memberships
        J = np.argmin(D[:,M], axis=1)
        for kappa in range(k):
            C[kappa] = np.where(J==kappa)[0]

    # return results
    return M, C

############################################  K MEDOID ENDS   ###################################################





a=[18.3431675256
,19.8840937616
,20.9146648968
,19.7458757095
,18.3146777258
,21.3151252179
,30.6854174753
,20.5820097685
,30.6898463122
,30.6898463122
,30.0380919862
,30.5947888395
,18.7702536694
,30.688258416
,26.6888833409
,19.7196998458
,30.367718046
,22.4100335185
,22.9994260843
,20.2585021011
,30.6877570926
,27.6172288463
,28.3934027869
,23.5507623913
,23.4283408146
,26.292394437
,35.4591856386
,22.3273789871
,24.7502538454
,30.6865873062
,34.921940313
,30.1852725724
,24.3796567021
,30.3346014134
,22.4446875208
,21.8687201497
,27.8367221105
,26.0077771849
,19.5847599044
,30.6870038133
,30.6905978167
,29.7827156544
,20.4192138972
,20.4253327436
,30.6898463122
,17.6978684411
,27.839137132
,30.6898463122
,20.7170031058
,25.2730644461
,20.9026468095
,21.8108580058
,27.3934847892
,19.7248976057
,30.6898463122
,25.3716503926
,30.6898463122
,30.6870038133
,30.6898463122
,24.9859405783
,18.3554267238
,30.688258416
,24.7768924774
,30.6881684682
,21.4343649067
,19.8400953254
,21.7765320228
,30.6898463122
,20.8856415016
,25.7136507858
,18.5463701047
,20.1701676234
,28.258074241
,23.4975994409
,27.6115349136
,18.224217647
,30.6898463122
,17.7510275644
,30.3653606632
,18.9455249255
,21.3702570392
,30.5947888395
,24.9866290774
,30.3730512077
,18.3946105
,21.8168941591
,19.4190318101
,20.646567977
,19.2530227601
,20.6238616228
,21.0264460574
,18.294792275
,20.9485796169
,30.6898463122
,21.9613826665
,20.7541488353
,25.1819812982
,20.9893746013
,34.6606347649
,30.6898463122
,19.1928465437
,35.6422669466
,19.0290972218
,21.3063130165
,18.9211174763
,19.2073070377
,30.1111507116
,20.6125403194]




b=[0.0654534333269
,0.0631992342877
,0.0666100147719
,0.0679162975591
,0.0615661470751
,0.0679479689669
,0.0740207963556
,0.0628766060384
,0.0739421671262
,0.0739421671262
,0.0604151523889
,0.0748940534981
,0.0633421671853
,0.0739690346655
,0.0573143341608
,0.0632585540681
,0.0764724547841
,0.0682083914752
,0.0605653768984
,0.0614413436308
,0.0741160379647
,0.0601367653844
,0.0615885408968
,0.0627645146307
,0.0644414946745
,0.056590663307
,0.0634115499209
,0.0652792993445
,0.0637042830916
,0.0739918790267
,0.0630063096188
,0.0734719626611
,0.0633691600229
,0.0736328348344
,0.0627794898417
,0.066328729292
,0.0714776995329
,0.0645295935975
,0.0661928735437
,0.0741319167711
,0.0742095298806
,0.0617898987852
,0.0633791377841
,0.0663254163788
,0.0739421671262
,0.0619161537553
,0.0656135132028
,0.0739421671262
,0.0623170940769
,0.0620818832663
,0.0640060405524
,0.066636784068
,0.0631495660952
,0.0673858861545
,0.0739421671262
,0.0633500628806
,0.0739421671262
,0.0741319167711
,0.0739421671262
,0.0629318317882
,0.0626498148487
,0.0742372307706
,0.0633208470506
,0.0742134075954
,0.0639597480989
,0.0655061932579
,0.0645117494737
,0.0739421671262
,0.0662531573557
,0.0602334294521
,0.0645938626019
,0.0641383241658
,0.0642044989274
,0.0637364678195
,0.0622183391146
,0.0633654882978
,0.0739421671262
,0.063153447365
,0.0722661013743
,0.0627649008415
,0.0667436722561
,0.0748940534981
,0.0614509115364
,0.0624488253003
,0.0662220196252
,0.0632984368629
,0.0635702756943
,0.0673394798044
,0.0659926009785
,0.0659859035544
,0.0666093988957
,0.0637639813859
,0.0646031194672
,0.0739421671262
,0.0649631493564
,0.0645715228299
,0.065991022939
,0.0628028911176
,0.063324183507
,0.0739421671262
,0.0645057584108
,0.0611231225034
,0.06424950632
,0.0630494791257
,0.0633554896417
,0.0635124798129
,0.0630272233277
,0.064324812949]




e=[0.0273707677982
,0.0381526628289
,0.0311771714587
,0.028123046002
,0.0342699819085
,0.0250732497221
,0.0
,0.0
,0.0
,0.0
,0.0314844823891
,0.0
,0.0354243517896
,0.0
,0.0298486403723
,0.0288074100566
,0.0
,0.0251558151692
,0.0317992812144
,0.0
,0.0
,0.0387347645464
,0.0156046286712
,0.0300311138105
,0.0224872307049
,0.0
,0.0337309214732
,0.0299316399561
,0.0408498146979
,0.0
,0.0316858430509
,0.0
,0.0314372834893
,0.0
,0.0298489714112
,0.0317762335989
,0.0
,0.0274242504476
,0.0327338088934
,0.0
,0.0
,0.031965065909
,0.0349359710426
,0.0205219435895
,0.0
,0.0429283237764
,0.0387592866945
,0.0
,0.0
,0.0239749795298
,0.0305236803548
,0.0310190278099
,0.0319344724239
,0.0346077892392
,0.0
,0.0298513942091
,0.0
,0.0
,0.0
,0.0317718700399
,0.0206455271822
,0.0
,0.0329764845375
,0.0
,0.0216299244742
,0.0
,0.0400278248262
,0.0
,0.0
,0.0376317949634
,0.0359248481254
,0.0
,0.0290468834939
,0.024779528314
,0.0317987956086
,0.0238642568399
,0.0
,0.0304519682175
,0.0
,0.0229747472935
,0.0295524439362
,0.0
,0.0295263942595
,0.0361517437801
,0.0341772226876
,0.0
,0.0324285772504
,0.0289011620633
,0.029548259568
,0.031413252024
,0.0391894946402
,0.0299748588917
,0.0267383879375
,0.0
,0.0289094806525
,0.0283988139556
,0.0293063981354
,0.0350341249324
,0.0351534952882
,0.0
,0.0285874193085
,0.0322215389466
,0.046646543711
,0.027902423911
,0.0364923257537
,0.0338636785586
,0.0285545130683
,0.0406392590861]




a1=[19.24834733
,20.146122407
,28.7179370959
,21.5504683118
,30.6898463122
,28.6577103797
,19.6761875064
,21.9781461077
,26.9190167754
,19.9768887923
,21.7578750848
,21.3237534089
,20.4264759805
,23.1543740845
,20.808721831
,20.4352758024
,30.0681917289
,20.5414636004
,29.9150165568
,23.0722087894
,21.2184293138
,22.485259431
,23.1869086244
,21.6274694751
,29.6173892095
,25.2311527185
,30.0856095786
,30.1555443501
,22.7746703517
,23.7370494036
,21.0443875662
,22.4940732935
,20.837496392
,19.9481765789
,21.3709334726
,20.9446580839
,20.4722604628
,24.7403618602
,31.5444069137
,20.773604594
,19.5304000312
,26.6032363088
,30.6688427777
,20.5709471606
,20.8669403452
,30.0462002533
,21.908784668
,30.2611704231
,21.0316119746
,30.6898463122
,19.7523468656
,22.1212277677
,27.2521627906
,20.6681968003
,20.1177869861
,20.2114800212
,20.6704848265
,20.444139026
,29.4492881133
,21.863356511
,20.8379929902
,22.6388263245
,24.1348535621
,19.6496498412
,20.4762117727
,19.841804364
,28.8697081228
,20.9974357409
,23.6297242279
,20.3782186383
,24.6076331578
,19.8233347267
,21.6119600782
,20.5900124646
,23.8096690472
,37.4872100987
,20.4756386756
,20.1038506013
,24.2848157558
,19.5525958159
,21.7185670302
,29.3199317657
,25.7482559498
,20.494848174
,21.1636295344
,21.6467452594
,23.476201807
,22.3413758491
,30.6806477356
,21.0932909494
,30.6587793875
,23.335943825
,29.054586476
,26.8410422474
,29.6449719004
,22.0056840571
,22.6581770662
,21.9346753863
,22.8719428962
,21.3243865331
,19.9325465071
,20.4311219238
,26.0885983906
,24.0576987181
,21.8076794332
,30.8077579307
,26.1224845058
,21.278858571
,20.5187206324
,20.9589186021
,25.2385064587
,30.0897801885]




b1=[0.0661181088696
,0.0633089537221
,0.0738256260479
,0.0664911355387
,0.0739421671262
,0.0720629775025
,0.0672934485842
,0.0696901892808
,0.0648898636548
,0.0669398913937
,0.0704607846953
,0.0688089812973
,0.0673118146654
,0.0707937270403
,0.0683456937632
,0.0661782387337
,0.0727601111373
,0.0686798413031
,0.0723134682202
,0.0694918818627
,0.0690467353876
,0.0708685187998
,0.0696537200654
,0.066342504152
,0.0744429093961
,0.0655981928702
,0.0738726115513
,0.0734105114096
,0.0651460545496
,0.0673981318483
,0.0686062014945
,0.0649671744608
,0.0673485971373
,0.0666654203771
,0.0661853923868
,0.0696335093601
,0.0665065827345
,0.0655090724137
,0.0643989916424
,0.0675360065395
,0.0677656430789
,0.064085593783
,0.074570807232
,0.0695140982742
,0.0657580250269
,0.0724190201826
,0.070089255453
,0.0728281481226
,0.0671909750091
,0.0739421671262
,0.0670511214071
,0.0672855950597
,0.0707255442623
,0.0674491037026
,0.0677713287462
,0.0675870699814
,0.068296503391
,0.0665009934351
,0.0643737777564
,0.0677148181366
,0.0678540068615
,0.07010169243
,0.0651753238077
,0.0656903585586
,0.0685519825073
,0.0660233997444
,0.0719977790964
,0.0686392852828
,0.0727629140827
,0.0683717599141
,0.0653213679558
,0.0655471101666
,0.0670254483099
,0.0656851008235
,0.0718454882905
,0.0635526996408
,0.0675747817764
,0.0682564804509
,0.0713163491514
,0.0667535266937
,0.0664835288188
,0.070960077525
,0.0690790164148
,0.0677118645461
,0.0685390108875
,0.0692636016302
,0.0709079011999
,0.0651993553969
,0.0723938471372
,0.0680268778039
,0.074183685488
,0.0677436347077
,0.0728982653651
,0.0648261040081
,0.0724613361558
,0.0695632992788
,0.0643322940112
,0.0683562145854
,0.0670118838376
,0.0668789958624
,0.0635979582974
,0.0680615298724
,0.0635545011113
,0.0651861477038
,0.0681914094673
,0.0888134405981
,0.0644888198324
,0.0687421575282
,0.0666597129387
,0.0659255199529
,0.0685360145522
,0.073273821197]




e1=[0.0240489093293
,0.0
,0.0
,0.0369594579033
,0.0235858443486
,0.0
,0.026173157984
,0.0295832208179
,0.0348991417901
,0.0295614082954
,0.0273979278888
,0.0203963393192
,0.0225294681039
,0.0293325625709
,0.0293331965957
,0.0
,0.0
,0.0
,0.0280047642491
,0.0359626927015
,0.0248426373477
,0.0256844277007
,0.0236143064215
,0.0316795456907
,0.0
,0.0292824419367
,0.0
,0.0
,0.0312213537729
,0.0261569489527
,0.0327501599534
,0.0
,0.0209103281214
,0.0186498664517
,0.0268316089742
,0.0277506322943
,0.0295113581903
,0.0289997658896
,0.0355302933735
,0.0424542904771
,0.0196776345455
,0.0277605479573
,0.0
,0.0304668136227
,0.0388145289117
,0.0
,0.0314543666268
,0.0
,0.0270069333736
,0.0375315024386
,0.0239548294169
,0.0289385281025
,0.0
,0.0274189284689
,0.0211239155358
,0.0343892176613
,0.0203949896224
,0.0279949216277
,0.034729096837
,0.0304362585434
,0.0344666116047
,0.0277312002443
,0.0271768588829
,0.0310970167543
,0.0331055048835
,0.0232316873792
,0.0209305304129
,0.0285059796216
,0.0250634165837
,0.0316294913646
,0.0303697806665
,0.0383615419959
,0.0305209485761
,0.0203926156616
,0.0266503979934
,0.0266370575731
,0.0293250880753
,0.0300256563016
,0.0281971389573
,0.0298692614192
,0.0294445351909
,0.0
,0.0252017773111
,0.0289955324782
,0.0347344373495
,0.0222543894371
,0.026486611198
,0.0310120538353
,0.0
,0.024281868144
,0.0
,0.0290076421179
,0.0
,0.0326896056021
,0.0
,0.0274974380856
,0.0242745046179
,0.0290178978011
,0.0260148834813
,0.0217441736004
,0.0303329141333
,0.0338864711748
,0.0293077822796
,0.0298570139522
,0.0165143847692
,0.0
,0.0277894891982
,0.0238363439346
,0.0307782821495
,0.0281182029629
,0.0
,0.0]



################
A=[]
B=[]
E=[]
A1=[]
B1=[]
E1=[]
################

c=[]

for i in range(len(a)):
    if((a[i]>0 and b[i]>0) or (b[i]>0 and e[i]>0) or (e[i]>0 and a[i]>0)):
        A.append(10*(a[i]/max(a+a1)))
        B.append(10*(b[i]/max(b+b1)))
        E.append(10*(e[i]/max(e+e1)))

for i in range(len(a1)):
    if((a1[i]>0 and b1[i]>0) or (b1[i]>0 and e1[i]>0) or (e1[i]>0 and a1[i]>0)):
        A1.append(10*(a1[i]/max(a+a1)))
        B1.append(10*(b1[i]/max(b+b1)))
        E1.append(10*(e1[i]/max(e+e1)))





c.append(A)
c.append(B)
c.append(E)
c=np.array(c)
c=c.reshape((len(A),3))
#c=MinMaxScaler().fit_transform(c)




c1=[]
c1.append(A1)
c1.append(B1)
c1.append(E1)
c1=np.array(c1)
c1=c1.reshape((len(A1),3))
#c1=MinMaxScaler().fit_transform(c1)


d=[]
for i in range(len(c)):
    d.append(c[i])
for i in range(len(c1)):
    d.append(c1[i])



# distance matrix
D = pairwise_distances(d, metric='euclidean')

# split into 2 clusters
M, C = kMedoids(D, 2)

print('medoids:')
for point_idx in M:
    print( d[point_idx] )

print('')
print('clustering result:')
fig=plt.figure()
ax=fig.add_subplot(111,projection='3d')


####################
AA=[]
BB=[]
EE=[]
AA1=[]
BB1=[]
EE1=[]
####################
for label in C:
    for point_idx in C[label]:
        print('label {0} :　{1}'.format(label, d[point_idx]))
        if(label==0):
            AA.append(d[point_idx][0])
            BB.append(d[point_idx][1])
            EE.append(d[point_idx][2])
            
        else:
            AA1.append(d[point_idx][0])
            BB1.append(d[point_idx][1])
            EE1.append(d[point_idx][2])
            

ax.scatter(AA,BB,EE,c='r',marker='o')
ax.scatter(AA1,BB1,EE1,c='b',marker='o')


plt.show()
